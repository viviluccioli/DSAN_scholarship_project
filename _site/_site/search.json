[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "analysis/unknown_charts_index.html",
    "href": "analysis/unknown_charts_index.html",
    "title": "Analysis of Violence Against Humanitarian Aid Workers",
    "section": "",
    "text": "This document contains visualizations broken down by the number of unknown fields."
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Uncovering the Unknown - Insights into Violence Against Humanitarian Aid",
    "section": "",
    "text": "The Aid Worker Security Database (AWSD) documents instances of ‘major violence’ against aid workers, which includes:\n\nKidnapping\nKilling\nWounding (serious injury requiring medical attention)\nRape and sexual assault"
  },
  {
    "objectID": "background.html#data-source",
    "href": "background.html#data-source",
    "title": "Uncovering the Unknown - Insights into Violence Against Humanitarian Aid",
    "section": "",
    "text": "The Aid Worker Security Database (AWSD) documents instances of ‘major violence’ against aid workers, which includes:\n\nKidnapping\nKilling\nWounding (serious injury requiring medical attention)\nRape and sexual assault"
  },
  {
    "objectID": "background.html#definition-of-aid-workers",
    "href": "background.html#definition-of-aid-workers",
    "title": "Uncovering the Unknown - Insights into Violence Against Humanitarian Aid",
    "section": "Definition of Aid Workers",
    "text": "Definition of Aid Workers\nAid workers are defined as employees and associated personnel (both paid and volunteer) of nonprofit aid agencies providing material and technical assistance in humanitarian contexts. This encompasses:\n\nNational and international NGOs\nLocal volunteer groups\nInternational Red Cross/Red Crescent Movement\nDonor agencies\nUN agencies within the Inter-Agency Standing Committee on Humanitarian Affairs (FAO, OCHA, UNDP, UNFPA, UNHCR, UNICEF, UN-Habitat, WFP and WHO)\nIOM, UNRWA, UNMAS, and when relevant, the World Bank\n\nThis definition includes locally contracted staff like drivers and security guards. It also covers contracted workers and vendors of humanitarian organizations when they are affected by violence while supporting humanitarian missions.\nThe definition excludes UN peacekeeping personnel, human rights workers, election monitors, and organizations focused solely on political, religious, or advocacy work."
  },
  {
    "objectID": "analysis/tables.html",
    "href": "analysis/tables.html",
    "title": "Violence Against Humanitarian Aid",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import to_rgba\nimport seaborn as sns\n\ndf = pd.read_csv('../../data/cleaned_security_incidents.csv')\n\n\n\n\nCode\nunknown_cols = ['means_of_attack', 'attack_context', 'location', 'motive', 'actor_type', 'actor_name']\n\n# Create a new column counting unknowns per row\ndf['unknown_count'] = df[unknown_cols].apply(lambda row: sum(row.str.lower() == 'unknown'), axis=1)\n\n# Count the occurrences\nunknown_summary = df['unknown_count'].value_counts().sort_index(ascending=False)\ndisplay(unknown_summary)\n\n# Plot distribution of unknown_count\nplt.figure(figsize=(8, 5))\nsns.barplot(x=unknown_summary.index, y=unknown_summary.values, palette='Blues_d')\nplt.title('Distribution of Unknown Fields per Incident', fontsize=14)\nplt.xlabel('Number of Unknown Fields', fontsize=12)\nplt.ylabel('Number of Incidents', fontsize=12)\nplt.tight_layout()\nplt.show()\n\n\nunknown_count\n6     64\n5    206\n4    302\n3    856\n2    881\n1    691\n0    957\nName: count, dtype: int64\n\n\n/var/folders/vs/3j3cdp2s1nn0lr6x50_9ycj00000gn/T/ipykernel_71857/1837422048.py:12: FutureWarning:\n\n\n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\nfrom IPython.display import HTML, display\n\n# Create individual charts for each unknown count\ndef create_visualizations_for_quarto(df):\n    \"\"\"Create separate HTML files for each visualization\"\"\"\n    \n    # Get all possible unknown counts\n    unknown_counts = sorted(df['unknown_count'].unique())\n    \n    # For each count, create a set of charts\n    for count in unknown_counts:\n        filtered_df = df[df['unknown_count'] == count]\n        \n        # Skip if no data\n        if filtered_df.empty:\n            continue\n        \n        # 1. Country chart\n        if 'country' in filtered_df.columns:\n            country_counts = filtered_df['country'].value_counts().reset_index().head(10)\n            country_counts.columns = ['country', 'count']\n            \n            fig = px.bar(\n                country_counts,\n                x='country',\n                y='count',\n                title=f'Top Countries with {count} Unknown Fields ({len(filtered_df)} incidents)'\n            )\n            pio.write_html(fig, f'unknown_{count}_countries.html', auto_open=False)\n        \n        # 2. Year trend chart\n        if 'year' in filtered_df.columns:\n            year_counts = filtered_df['year'].value_counts().sort_index().reset_index()\n            year_counts.columns = ['year', 'count']\n            \n            fig = px.line(\n                year_counts,\n                x='year',\n                y='count',\n                markers=True,\n                title=f'Incidents by Year with {count} Unknown Fields'\n            )\n            pio.write_html(fig, f'unknown_{count}_years.html', auto_open=False)\n        \n        # 3. Unknown field distribution\n        unknown_cols = ['means_of_attack', 'attack_context', 'location', 'motive', 'actor_type', 'actor_name']\n        field_counts = {}\n        for field in unknown_cols:\n            if field in filtered_df.columns:\n                field_counts[field] = filtered_df[filtered_df[field].str.lower() == 'unknown'].shape[0]\n        \n        fields_df = pd.DataFrame({'field': list(field_counts.keys()), 'count': list(field_counts.values())})\n        \n        fig = px.bar(\n            fields_df,\n            x='field',\n            y='count',\n            title=f'Distribution of Unknown Fields for {count} Unknown Incidents'\n        )\n        pio.write_html(fig, f'unknown_{count}_fields.html', auto_open=False)\n        \n        # 4. Save summary statistics to an HTML file\n        numeric_cols = ['total_killed', 'total_wounded', 'total_kidnapped', 'total_affected']\n        available_cols = [col for col in numeric_cols if col in filtered_df.columns]\n        \n        if available_cols:\n            stats = filtered_df[available_cols].agg(['sum', 'mean', 'median']).round(2)\n            stats_html = stats.to_html()\n            \n            with open(f'unknown_{count}_stats.html', 'w') as f:\n                f.write(f\"\"\"\n                &lt;h3&gt;Statistics for {count} Unknown Fields ({len(filtered_df)} incidents)&lt;/h3&gt;\n                {stats_html}\n                \"\"\")\n    \n    # Create an index of all charts for easy navigation\n    with open('unknown_charts_index.md', 'w') as f:\n        f.write(f\"# Analysis of Violence Against Humanitarian Aid Workers\\n\\n\")\n        f.write(f\"This document contains visualizations broken down by the number of unknown fields.\\n\\n\")\n        \n        for count in unknown_counts:\n            filtered_df = df[df['unknown_count'] == count]\n            if filtered_df.empty:\n                continue\n                \n            f.write(f\"## {count} Unknown Fields ({len(filtered_df)} incidents)\\n\\n\")\n            \n            f.write(\"### Top Countries\\n\\n\")\n            f.write(f\"![](unknown_{count}_countries.html)\\n\\n\")\n            \n            f.write(\"### Incidents by Year\\n\\n\")\n            f.write(f\"![](unknown_{count}_years.html)\\n\\n\")\n            \n            f.write(\"### Distribution of Unknown Fields\\n\\n\")\n            f.write(f\"![](unknown_{count}_fields.html)\\n\\n\")\n            \n            f.write(\"### Statistics\\n\\n\")\n            f.write(f\"![](unknown_{count}_stats.html)\\n\\n\")\n\n# Create the visualizations\ncreate_visualizations_for_quarto(df)\nprint(\"Created individual visualizations for Quarto rendering\")\n\n\nCreated individual visualizations for Quarto rendering\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport json\nimport numpy as np\n\n# Pre-process the data for all unknown count values\ndef create_interactive_dashboard(df):\n    # Make sure unknown_count column exists (if not, this could be added)\n    if 'unknown_count' not in df.columns:\n        unknown_cols = ['means_of_attack', 'attack_context', 'location', 'motive', 'actor_type', 'actor_name']\n        df['unknown_count'] = df[unknown_cols].apply(lambda row: sum(row.str.lower() == 'unknown'), axis=1)\n    \n    # Get all possible unknown count values - ensure we have 0-6\n    unknown_counts = list(range(7))  # 0 through 6\n    \n    # Create the HTML structure\n    html = \"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Violence Against Humanitarian Aid Workers&lt;/title&gt;\n        &lt;script src=\"https://cdn.plot.ly/plotly-latest.min.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\"&gt;\n        &lt;style&gt;\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .dashboard-container { margin-top: 20px; }\n            .row { display: flex; margin-bottom: 20px; }\n            .chart { width: 48%; margin: 0 1%; }\n            h1, h2, h3 { color: #333; }\n            select { padding: 8px; font-size: 16px; }\n            table { border-collapse: collapse; width: 100%; }\n            th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }\n            th { background-color: #f2f2f2; }\n            .control-panel { \n                background-color: #f8f9fa; \n                padding: 15px; \n                border-radius: 5px;\n                margin-bottom: 20px;\n            }\n            .data-table-container {\n                margin-top: 30px;\n                overflow-x: auto;\n            }\n            .summary-box {\n                background-color: #f8f9fa;\n                padding: 15px;\n                border-radius: 5px;\n                margin-bottom: 15px;\n            }\n            .tab-content {\n                padding: 20px;\n                border: 1px solid #dee2e6;\n                border-top: none;\n                border-radius: 0 0 5px 5px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"container-fluid\"&gt;\n            &lt;h1 class=\"mt-3 mb-4\"&gt;Violence Against Humanitarian Aid Workers&lt;/h1&gt;\n            \n            &lt;div class=\"control-panel\"&gt;\n                &lt;div class=\"row\"&gt;\n                    &lt;div class=\"col-md-6\"&gt;\n                        &lt;label for=\"unknown-selector\" class=\"form-label\"&gt;Select number of unknown fields:&lt;/label&gt;\n                        &lt;select id=\"unknown-selector\" class=\"form-select\" onchange=\"updateDashboard(this.value)\"&gt;\n    \"\"\"\n    \n    # Add options to the dropdown - in reverse order (6 to 0)\n    for count in sorted(unknown_counts, reverse=True):\n        selected = \"selected\" if count == 6 else \"\"  # Default to 6 unknowns first\n        html += f'&lt;option value=\"{int(count)}\" {selected}&gt;{int(count)}&lt;/option&gt;\\n'\n    \n    html += \"\"\"\n                        &lt;/select&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"col-md-6\"&gt;\n                        &lt;label for=\"sort-selector\" class=\"form-label\"&gt;Sort individual incidents by:&lt;/label&gt;\n                        &lt;select id=\"sort-selector\" class=\"form-select\" onchange=\"sortData(this.value)\"&gt;\n                            &lt;option value=\"year\"&gt;Year&lt;/option&gt;\n                            &lt;option value=\"total_affected\"&gt;Total Affected&lt;/option&gt;\n                            &lt;option value=\"total_killed\"&gt;Total Killed&lt;/option&gt;\n                            &lt;option value=\"total_wounded\"&gt;Total Wounded&lt;/option&gt;\n                            &lt;option value=\"total_kidnapped\"&gt;Total Kidnapped&lt;/option&gt;\n                            &lt;option value=\"country\"&gt;Country&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            \n            &lt;ul class=\"nav nav-tabs\" id=\"dashboardTabs\" role=\"tablist\"&gt;\n                &lt;li class=\"nav-item\" role=\"presentation\"&gt;\n                    &lt;button class=\"nav-link active\" id=\"overview-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#overview\" type=\"button\" role=\"tab\"&gt;Overview&lt;/button&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\" role=\"presentation\"&gt;\n                    &lt;button class=\"nav-link\" id=\"data-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#data\" type=\"button\" role=\"tab\"&gt;Raw Data&lt;/button&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n            \n            &lt;div class=\"tab-content\" id=\"dashboardTabsContent\"&gt;\n                &lt;div class=\"tab-pane fade show active\" id=\"overview\" role=\"tabpanel\"&gt;\n                    &lt;div id=\"summary-stats\" class=\"summary-box\"&gt;&lt;/div&gt;\n                    \n                    &lt;div class=\"row\"&gt;\n                        &lt;div class=\"col-md-6\"&gt;\n                            &lt;div id=\"country-chart\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"col-md-6\"&gt;\n                            &lt;div id=\"year-chart\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    \n                    &lt;div class=\"row mt-4\"&gt;\n                        &lt;div class=\"col-md-6\"&gt;\n                            &lt;div id=\"fields-chart\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"col-md-6\"&gt;\n                            &lt;div id=\"casualties-table\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                \n                &lt;div class=\"tab-pane fade\" id=\"data\" role=\"tabpanel\"&gt;\n                    &lt;div class=\"data-table-container\"&gt;\n                        &lt;h3&gt;Individual Incident Data&lt;/h3&gt;\n                        &lt;div id=\"data-pagination\" class=\"d-flex justify-content-between align-items-center mb-3\"&gt;\n                            &lt;div&gt;\n                                &lt;button id=\"prev-page\" class=\"btn btn-sm btn-outline-secondary\" onclick=\"prevPage()\"&gt;Previous&lt;/button&gt;\n                                &lt;span id=\"page-info\" class=\"mx-2\"&gt;Page 1&lt;/span&gt;\n                                &lt;button id=\"next-page\" class=\"btn btn-sm btn-outline-secondary\" onclick=\"nextPage()\"&gt;Next&lt;/button&gt;\n                            &lt;/div&gt;\n                            &lt;div&gt;\n                                &lt;select id=\"page-size\" class=\"form-select form-select-sm\" style=\"width: auto;\" onchange=\"changePageSize(this.value)\"&gt;\n                                    &lt;option value=\"10\"&gt;10 rows&lt;/option&gt;\n                                    &lt;option value=\"25\"&gt;25 rows&lt;/option&gt;\n                                    &lt;option value=\"50\"&gt;50 rows&lt;/option&gt;\n                                    &lt;option value=\"100\"&gt;100 rows&lt;/option&gt;\n                                &lt;/select&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div id=\"data-table\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        \n        &lt;script&gt;\n    \"\"\"\n    \n    # Create a JavaScript data object with pre-computed data for each unknown count\n    data_json = {}\n    \n    for count in unknown_counts:\n        filtered_df = df[df['unknown_count'] == count]\n        \n        # If there's no data for this unknown count, create an empty entry\n        if filtered_df.empty:\n            data_json[int(count)] = {\n                'countries': [],\n                'years': [],\n                'fields': [],\n                'top_years': [],\n                'casualties': {},\n                'total_incidents': 0,\n                'raw_data': [],\n                'columns': []\n            }\n            continue\n        \n        # Country data\n        country_counts = filtered_df['country'].value_counts().reset_index()\n        country_counts.columns = ['country', 'count']\n        country_counts = country_counts.head(5)\n        \n        # Year data\n        year_counts = filtered_df['year'].value_counts().sort_index().reset_index()\n        year_counts.columns = ['year', 'count']\n        \n        # Unknown fields data\n        unknown_cols = ['means_of_attack', 'attack_context', 'location', 'motive', 'actor_type', 'actor_name']\n        field_counts = {}\n        for field in unknown_cols:\n            if field in filtered_df.columns:\n                field_counts[field] = int(filtered_df[filtered_df[field].str.lower() == 'unknown'].shape[0])\n            else:\n                field_counts[field] = 0\n        \n        fields_df = pd.DataFrame({'field': list(field_counts.keys()), 'count': list(field_counts.values())})\n        \n        # Casualties data\n        numeric_cols = ['total_killed', 'total_wounded', 'total_kidnapped', 'total_affected']\n        # Only include columns that exist in the dataframe\n        available_numeric_cols = [col for col in numeric_cols if col in filtered_df.columns]\n        \n        if available_numeric_cols:\n            stats = filtered_df[available_numeric_cols].mean().round(2).to_dict()\n            # Convert numpy types to Python native types\n            stats = {k: float(v) for k, v in stats.items()}\n        else:\n            stats = {}\n        \n        # Top years\n        if 'year' in filtered_df.columns:\n            top_years = filtered_df['year'].value_counts().head(5)\n            top_years_data = [{'year': int(year), 'count': int(count)} for year, count in top_years.items()]\n        else:\n            top_years_data = []\n        \n        # Full dataset (for the data tab)\n        # Select a subset of columns for display\n        display_cols = ['incident_id', 'year', 'month', 'day', 'country', \n                        'means_of_attack', 'attack_context', 'location', 'motive', 'actor_type', 'actor_name',\n                        'total_killed', 'total_wounded', 'total_kidnapped', 'total_affected']\n        \n        # Only include columns that exist in the dataframe\n        display_cols = [col for col in display_cols if col in filtered_df.columns]\n        \n        # Convert the filtered dataframe to a list of records\n        records = []\n        for _, row in filtered_df.iterrows():\n            record = {}\n            for col in display_cols:\n                val = row[col]\n                if isinstance(val, (np.integer, np.floating)):\n                    val = int(val) if isinstance(val, np.integer) else float(val)\n                elif pd.isna(val):\n                    val = \"\"\n                else:\n                    val = str(val)\n                record[col] = val\n            records.append(record)\n        \n        # Store all data for this unknown count\n        data_json[int(count)] = {\n            'countries': [\n                {'country': str(row.country), 'count': int(row['count'])} \n                for _, row in country_counts.iterrows()\n            ],\n            'years': [\n                {'year': int(row.year), 'count': int(row['count'])} \n                for _, row in year_counts.iterrows()\n            ] if 'year' in filtered_df.columns else [],\n            'fields': [\n                {'field': str(row.field), 'count': int(row['count'])} \n                for _, row in fields_df.iterrows()\n            ],\n            'top_years': top_years_data,\n            'casualties': stats,\n            'total_incidents': int(len(filtered_df)),\n            'raw_data': records,\n            'columns': display_cols\n        }\n    \n    # Add the data to JavaScript\n    html += f\"const dashboardData = {json.dumps(data_json)};\\n\"\n    \n    # Add JavaScript functions for interactivity\n    html += \"\"\"\n        let currentPage = 1;\n        let pageSize = 10;\n        let currentSort = 'year';\n        let currentSortAsc = false;\n        let currentUnknownCount = 6;  // Start with 6 unknowns by default\n        \n        // Initial setup\n        document.addEventListener('DOMContentLoaded', function() {\n            updateDashboard(currentUnknownCount);\n        });\n        \n        function updateDashboard(unknownCount) {\n            currentUnknownCount = parseInt(unknownCount);\n            currentPage = 1; // Reset to first page when changing filters\n            const data = dashboardData[currentUnknownCount];\n            \n            // Update summary stats\n            updateSummaryStats(data);\n            \n            // Update charts\n            updateCharts(data);\n            \n            // Update data table\n            renderDataTable();\n        }\n        \n        function updateSummaryStats(data) {\n            let summaryHTML = `\n                &lt;div class=\"row\"&gt;\n                    &lt;div class=\"col-md-12\"&gt;\n                        &lt;h2&gt;Summary for Incidents with ${currentUnknownCount} Unknown Fields&lt;/h2&gt;\n                        &lt;p&gt;Found ${data.total_incidents} incidents with ${currentUnknownCount} unknown fields.&lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            `;\n            \n            document.getElementById('summary-stats').innerHTML = summaryHTML;\n        }\n        \n        function updateCharts(data) {\n            // Check if there's data to display\n            if (data.total_incidents === 0) {\n                document.getElementById('country-chart').innerHTML = '&lt;div class=\"alert alert-info\"&gt;No data available for this selection.&lt;/div&gt;';\n                document.getElementById('year-chart').innerHTML = '&lt;div class=\"alert alert-info\"&gt;No data available for this selection.&lt;/div&gt;';\n                document.getElementById('fields-chart').innerHTML = '&lt;div class=\"alert alert-info\"&gt;No data available for this selection.&lt;/div&gt;';\n                document.getElementById('casualties-table').innerHTML = '&lt;div class=\"alert alert-info\"&gt;No data available for this selection.&lt;/div&gt;';\n                return;\n            }\n            \n            // Update country chart\n            if (data.countries.length &gt; 0) {\n                const countryData = [{\n                    x: data.countries.map(d =&gt; d.country),\n                    y: data.countries.map(d =&gt; d.count),\n                    type: 'bar',\n                    marker: {color: '#1f77b4'}\n                }];\n                \n                Plotly.newPlot('country-chart', countryData, {\n                    title: 'Top Countries',\n                    xaxis: {title: 'Country'},\n                    yaxis: {title: 'Number of Incidents'}\n                });\n            } else {\n                document.getElementById('country-chart').innerHTML = '&lt;div class=\"alert alert-info\"&gt;No country data available.&lt;/div&gt;';\n            }\n            \n            // Update year chart\n            if (data.years.length &gt; 0) {\n                const yearData = [{\n                    x: data.years.map(d =&gt; d.year),\n                    y: data.years.map(d =&gt; d.count),\n                    type: 'scatter',\n                    mode: 'lines+markers',\n                    marker: {color: '#ff7f0e'}\n                }];\n                \n                Plotly.newPlot('year-chart', yearData, {\n                    title: 'Incidents by Year',\n                    xaxis: {title: 'Year'},\n                    yaxis: {title: 'Number of Incidents'}\n                });\n            } else {\n                document.getElementById('year-chart').innerHTML = '&lt;div class=\"alert alert-info\"&gt;No year data available.&lt;/div&gt;';\n            }\n            \n            // Update fields chart\n            if (data.fields.length &gt; 0) {\n                const fieldsData = [{\n                    x: data.fields.map(d =&gt; d.field),\n                    y: data.fields.map(d =&gt; d.count),\n                    type: 'bar',\n                    marker: {color: '#2ca02c'}\n                }];\n                \n                Plotly.newPlot('fields-chart', fieldsData, {\n                    title: 'Distribution of Unknown Fields',\n                    xaxis: {title: 'Field'},\n                    yaxis: {title: 'Number of Incidents'}\n                });\n            } else {\n                document.getElementById('fields-chart').innerHTML = '&lt;div class=\"alert alert-info\"&gt;No field data available.&lt;/div&gt;';\n            }\n            \n            // Update casualties table\n            if (Object.keys(data.casualties).length &gt; 0) {\n                let tableHTML = `\n                    &lt;h3&gt;Casualty Statistics (Average per Incident)&lt;/h3&gt;\n                    &lt;table class=\"table table-striped\"&gt;\n                        &lt;thead&gt;\n                            &lt;tr&gt;\n                                &lt;th&gt;Metric&lt;/th&gt;\n                                &lt;th&gt;Value&lt;/th&gt;\n                            &lt;/tr&gt;\n                        &lt;/thead&gt;\n                        &lt;tbody&gt;\n                `;\n                \n                Object.entries(data.casualties).forEach(([key, value]) =&gt; {\n                    tableHTML += `\n                        &lt;tr&gt;\n                            &lt;td&gt;${key.replace('total_', '').charAt(0).toUpperCase() + key.replace('total_', '').slice(1)}&lt;/td&gt;\n                            &lt;td&gt;${value.toFixed(2)}&lt;/td&gt;\n                        &lt;/tr&gt;\n                    `;\n                });\n                \n                tableHTML += '&lt;/tbody&gt;&lt;/table&gt;';\n                document.getElementById('casualties-table').innerHTML = tableHTML;\n            } else {\n                document.getElementById('casualties-table').innerHTML = '&lt;div class=\"alert alert-info\"&gt;No casualty data available.&lt;/div&gt;';\n            }\n        }\n        \n        function renderDataTable() {\n            const data = dashboardData[currentUnknownCount];\n            \n            // Check if there's data to display\n            if (data.raw_data.length === 0) {\n                document.getElementById('data-table').innerHTML = '&lt;div class=\"alert alert-info\"&gt;No data available for this selection.&lt;/div&gt;';\n                document.getElementById('data-pagination').style.display = 'none';\n                return;\n            }\n            \n            document.getElementById('data-pagination').style.display = 'flex';\n            const rawData = [...data.raw_data]; // Create a copy to avoid modifying the original\n            \n            // Sort data\n            rawData.sort((a, b) =&gt; {\n                if (!a.hasOwnProperty(currentSort) || !b.hasOwnProperty(currentSort)) {\n                    return 0; // If the property doesn't exist, don't change order\n                }\n                \n                const aVal = a[currentSort];\n                const bVal = b[currentSort];\n                \n                // Handle different data types\n                if (typeof aVal === 'number' && typeof bVal === 'number') {\n                    return currentSortAsc ? aVal - bVal : bVal - aVal;\n                } else {\n                    const aStr = String(aVal);\n                    const bStr = String(bVal);\n                    return currentSortAsc ? aStr.localeCompare(bStr) : bStr.localeCompare(aStr);\n                }\n            });\n            \n            // Paginate\n            const startIdx = (currentPage - 1) * pageSize;\n            const endIdx = startIdx + pageSize;\n            const pagedData = rawData.slice(startIdx, endIdx);\n            \n            // Create table HTML\n            let tableHTML = `\n                &lt;table class=\"table table-striped table-hover\"&gt;\n                    &lt;thead&gt;\n                        &lt;tr&gt;\n            `;\n            \n            // Add table headers with sort indicators\n            data.columns.forEach(col =&gt; {\n                const sortIcon = col === currentSort \n                    ? currentSortAsc ? '↑' : '↓' \n                    : '';\n                tableHTML += `&lt;th onclick=\"changeSort('${col}')\" style=\"cursor: pointer;\"&gt;${col} ${sortIcon}&lt;/th&gt;`;\n            });\n            \n            tableHTML += `\n                        &lt;/tr&gt;\n                    &lt;/thead&gt;\n                    &lt;tbody&gt;\n            `;\n            \n            // Add table rows\n            pagedData.forEach(row =&gt; {\n                tableHTML += '&lt;tr&gt;';\n                data.columns.forEach(col =&gt; {\n                    tableHTML += `&lt;td&gt;${row[col] !== undefined ? row[col] : ''}&lt;/td&gt;`;\n                });\n                tableHTML += '&lt;/tr&gt;';\n            });\n            \n            tableHTML += `\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            `;\n            \n            // Update the table\n            document.getElementById('data-table').innerHTML = tableHTML;\n            \n            // Update pagination info\n            const totalPages = Math.ceil(rawData.length / pageSize);\n            document.getElementById('page-info').textContent = `Page ${currentPage} of ${totalPages}`;\n            document.getElementById('prev-page').disabled = currentPage === 1;\n            document.getElementById('next-page').disabled = currentPage === totalPages || totalPages === 0;\n        }\n        \n        function changeSort(column) {\n            if (currentSort === column) {\n                // Toggle sort direction\n                currentSortAsc = !currentSortAsc;\n            } else {\n                // Set new sort column\n                currentSort = column;\n                currentSortAsc = false; // Default to descending\n            }\n            renderDataTable();\n        }\n        \n        function sortData(column) {\n            currentSort = column;\n            currentSortAsc = false;\n            renderDataTable();\n        }\n        \n        function prevPage() {\n            if (currentPage &gt; 1) {\n                currentPage--;\n                renderDataTable();\n            }\n        }\n        \n        function nextPage() {\n            const data = dashboardData[currentUnknownCount];\n            const totalPages = Math.ceil(data.raw_data.length / pageSize);\n            if (currentPage &lt; totalPages) {\n                currentPage++;\n                renderDataTable();\n            }\n        }\n        \n        function changePageSize(size) {\n            pageSize = parseInt(size);\n            currentPage = 1; // Reset to first page\n            renderDataTable();\n        }\n        &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    \n    return html\n\n# Generate the HTML content\nhtml_output = create_interactive_dashboard(df)\n\n# Save to external file\nwith open('interactive_dashboard.html', 'w') as f:\n    f.write(html_output)\n\nprint(\"Dashboard saved to interactive_dashboard.html\")\n\n\nDashboard saved to interactive_dashboard.html"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Uncovering the Unknown - Insights into Violence Against Humanitarian Aid",
    "section": "",
    "text": "Violence Against Humanitarian...\n  \n    Home\n    Background & Context\n    Analysis\n  \n\n\n\n\n  \n    Since 1997, 0 humanitarian aid workers have been affected by violence against aid workers.\n  \n  \n  \n    \n      0\n      killed\n    \n    \n      0\n      wounded\n    \n    \n      0\n      kidnapped\n    \n  \n\n\n\n\n  \n    Limited resources have long prevented global organizations from fully capturing the truth behind attacks on humanitarian missions.\n  \n  \n  \n    But behind every missing detail is a missed opportunity to prepare, to protect, to prevent.\n  \n  \n  \n    To minimize the harm, we must uncover the patterns hidden in the data—and come together, as a global force, to turn insight into action.\n  \n\n\n\n\n  \n    \n    Background and Context\n\n    \n      Data Source\n      The Aid Worker Security Database (AWSD) documents instances of 'major violence' against aid workers, which includes:\n      \n        Kidnapping\n        Killing\n        Wounding (serious injury requiring medical attention)\n        Rape and sexual assault\n      \n      \n      Definition of Aid Workers\n      Aid workers are defined as employees and associated personnel (both paid and volunteer) of nonprofit aid agencies providing material and technical assistance in humanitarian contexts. This encompasses:\n      \n        National and international NGOs\n        Local volunteer groups\n        International Red Cross/Red Crescent Movement\n        Donor agencies\n        UN agencies within the Inter-Agency Standing Committee on Humanitarian Affairs (FAO, OCHA, UNDP, UNFPA, UNHCR, UNICEF, UN-Habitat, WFP and WHO)\n        IOM, UNRWA, UNMAS, and when relevant, the World Bank\n      \n      \n      This definition includes locally contracted staff like drivers and security guards. It also covers contracted workers and vendors of humanitarian organizations when they are affected by violence while supporting humanitarian missions.\n      \n      The definition excludes UN peacekeeping personnel, human rights workers, election monitors, and organizations focused solely on political, religious, or advocacy work."
  }
]