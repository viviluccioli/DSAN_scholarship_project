[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "analysis/tables.html",
    "href": "analysis/tables.html",
    "title": "Interactive Dashboard",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport numpy as np\nfrom IPython.display import display, HTML\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import to_rgba\nimport seaborn as sns\n\ndf = pd.read_csv('../../data/cleaned_security_incidents.csv')\n\n\n\n\nCode\n# Function to create styled tables with \"Unknown\" highlighted in red\ndef create_styled_table(series_counts, title):\n    # Convert to DataFrame for styling\n    df_counts = series_counts.reset_index()\n    df_counts.columns = ['Category', 'Count']\n    \n    # Define styling function\n    def highlight_unknown(row):\n        # Check if the category contains any form of \"unknown\" (case insensitive)\n        if ('unknown' in str(row['Category']).lower()):\n            return ['background-color: rgba(255, 0, 0, 0.2)']*len(row)\n        else:\n            return ['background-color: transparent']*len(row)\n    \n    # Apply styling\n    styled_df = df_counts.style.apply(highlight_unknown, axis=1)\n    \n    # Add title and other formatting\n    styled_df = styled_df.set_caption(title).set_table_styles([\n        {'selector': 'caption', 'props': [('font-weight', 'bold'), \n                                         ('font-size', '1.1em'),\n                                         ('text-align', 'center')]},\n        {'selector': 'th', 'props': [('text-align', 'center'), \n                                    ('background-color', '#f2f2f2')]},\n        {'selector': 'td', 'props': [('text-align', 'center')]}\n    ])\n    \n    return styled_df\n\n# Get value counts for each category\nmeans_counts = df['means_of_attack'].value_counts()\ncontext_counts = df['attack_context'].value_counts()\nactor_counts = df['actor_type'].value_counts()\nmotive_counts = df['motive'].value_counts()\n\n# Create styled tables\nstyled_means = create_styled_table(means_counts, 'Means of Attack')\nstyled_context = create_styled_table(context_counts, 'Attack Context')\nstyled_actor = create_styled_table(actor_counts, 'Actor Type')\nstyled_motive = create_styled_table(motive_counts, 'Motive')\n\n# Display tables in a 2x2 grid using grid_items from IPython\nfrom IPython.display import display, HTML\n\n# Create a more explicit grid structure with inline HTML\ngrid_html = \"\"\"\n&lt;style&gt;\n    .grid-container {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        grid-gap: 20px;\n        width: 100%;\n    }\n    .grid-item {\n        width: 100%;\n    }\n&lt;/style&gt;\n\n&lt;div class=\"grid-container\"&gt;\n    &lt;div class=\"grid-item\" id=\"table1\"&gt;&lt;/div&gt;\n    &lt;div class=\"grid-item\" id=\"table2\"&gt;&lt;/div&gt;\n    &lt;div class=\"grid-item\" id=\"table3\"&gt;&lt;/div&gt;\n    &lt;div class=\"grid-item\" id=\"table4\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\"\"\"\n\n# First display the grid structure\ndisplay(HTML(grid_html))\n\n# Then inject each table into its respective grid cell using JavaScript\nfor i, (table_id, styled_table) in enumerate([\n    (\"table1\", styled_means),\n    (\"table2\", styled_actor),\n    (\"table3\", styled_context),\n    (\"table4\", styled_motive)\n]):\n    # Convert styled table to HTML and inject into the grid\n    table_html = styled_table.to_html()\n    display(HTML(f\"\"\"\n    &lt;script&gt;\n        document.getElementById(\"{table_id}\").innerHTML = `{table_html}`;\n    &lt;/script&gt;\n    \"\"\"))\n\n# Alternative approach that works well in most Jupyter environments\nfrom IPython.display import display_html\nfrom IPython.core.display import HTML, display\n\ndef display_side_by_side(dfs, captions=None):\n    \"\"\"Display tables side by side in Jupyter.\"\"\"\n    if captions is None:\n        captions = [''] * len(dfs)\n    \n    output = \"\"\n    for df, caption in zip(dfs, captions):\n        output += '&lt;div style=\"flex: 50%; padding: 5px;\"&gt;'\n        output += f'&lt;h4 style=\"text-align: center;\"&gt;{caption}&lt;/h4&gt;'\n        output += df.to_html()\n        output += '&lt;/div&gt;'\n    \n    display_html(HTML('&lt;div style=\"display: flex; flex-wrap: wrap;\"&gt;'+output+'&lt;/div&gt;'))\n\n# Uncommenting this will provide another option if the grid approach doesn't work\n\"\"\"\nprint(\"Top Row:\")\ndisplay_side_by_side([styled_means, styled_context], \n                    captions=['Means of Attack', 'Attack Context'])\n\nprint(\"Bottom Row:\")\ndisplay_side_by_side([styled_actor, styled_motive], \n                    captions=['Actor Type', 'Motive'])\n\"\"\"\n\n# Alternative approach using Matplotlib and Seaborn for better control of layout\n# This is another option if you prefer plots over HTML tables\n\ndef plot_count_tables(df, variables, titles, nrows=2, ncols=2, figsize=(12, 10)):\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=figsize)\n    axes = axes.flatten()\n    \n    for i, (var, title) in enumerate(zip(variables, titles)):\n        counts = df[var].value_counts().reset_index()\n        counts.columns = ['Category', 'Count']\n        \n        # Create bar plot\n        sns.barplot(x='Category', y='Count', data=counts, ax=axes[i], color='skyblue')\n        \n        # Highlight Unknown in red if present\n        if 'Unknown' in counts['Category'].values:\n            unknown_idx = counts[counts['Category'] == 'Unknown'].index[0]\n            unknown_bar = axes[i].patches[unknown_idx]\n            unknown_bar.set_facecolor('red')\n            unknown_bar.set_alpha(0.7)\n        \n        # Customize plot\n        axes[i].set_title(title, fontsize=12, fontweight='bold')\n        axes[i].tick_params(axis='x', rotation=45)\n        axes[i].set_xlabel('')\n        \n    plt.tight_layout()\n    plt.show()\n\n# Uncomment to use the matplotlib/seaborn approach\n'''\nplot_count_tables(\n    df,\n    variables=['means_of_attack', 'attack_context', 'actor_type', 'motive'],\n    titles=['Means of Attack', 'Attack Context', 'Actor Type', 'Motive']\n)\n'''\n\n\n\n\n\n\n    \n    \n    \n    \n\n\n\n\n    \n    \n\n\n\n    \n    \n\n\n\n    \n    \n\n\n\n    \n    \n\n\n\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\nCell In[4], line 87\n     85 # Alternative approach that works well in most Jupyter environments\n     86 from IPython.display import display_html\n---&gt; 87 from IPython.core.display import HTML, display\n     89 def display_side_by_side(dfs, captions=None):\n     90     \"\"\"Display tables side by side in Jupyter.\"\"\"\n\nImportError: cannot import name 'display' from 'IPython.core.display' (/opt/anaconda3/envs/dataviz5200/lib/python3.13/site-packages/IPython/core/display.py)\n\n\n\n\n\nCode\ndef plot_count_tables(df, variables, titles, nrows=2, ncols=2, figsize=(12, 10)):\n    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=figsize)\n    axes = axes.flatten()\n    \n    for i, (var, title) in enumerate(zip(variables, titles)):\n        counts = df[var].value_counts().reset_index()\n        counts.columns = ['Category', 'Count']\n        \n        # Create bar plot\n        sns.barplot(x='Category', y='Count', data=counts, ax=axes[i], color='skyblue')\n        \n        # Highlight Unknown in red if present\n        if 'Unknown' in counts['Category'].values:\n            unknown_idx = counts[counts['Category'] == 'Unknown'].index[0]\n            unknown_bar = axes[i].patches[unknown_idx]\n            unknown_bar.set_facecolor('red')\n            unknown_bar.set_alpha(0.7)\n        \n        # Customize plot\n        axes[i].set_title(title, fontsize=12, fontweight='bold')\n        axes[i].tick_params(axis='x', rotation=45)\n        axes[i].set_xlabel('')\n        \n    plt.tight_layout()\n    plt.show()\n\n\nplot_count_tables(\n    df,\n    variables=['means_of_attack', 'attack_context', 'actor_type', 'motive'],\n    titles=['Means of Attack', 'Attack Context', 'Actor Type', 'Motive']\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\nunknown_cols = ['means_of_attack', 'attack_context', 'location', 'motive', 'actor_type', 'actor_name']\n\n# Create a new column counting unknowns per row\ndf['unknown_count'] = df[unknown_cols].apply(lambda row: sum(row.str.lower() == 'unknown'), axis=1)\n\n# Count the occurrences\nunknown_summary = df['unknown_count'].value_counts().sort_index(ascending=False)\ndisplay(unknown_summary)\n\n# Plot distribution of unknown_count\nplt.figure(figsize=(8, 5))\nsns.barplot(x=unknown_summary.index, y=unknown_summary.values, palette='Blues_d')\nplt.title('Distribution of Unknown Fields per Incident', fontsize=14)\nplt.xlabel('Number of Unknown Fields', fontsize=12)\nplt.ylabel('Number of Incidents', fontsize=12)\nplt.tight_layout()\nplt.show()\n\n\n\nunknown_count\n6     64\n5    206\n4    302\n3    856\n2    881\n1    691\n0    957\nName: count, dtype: int64\n\n\n/var/folders/vs/3j3cdp2s1nn0lr6x50_9ycj00000gn/T/ipykernel_45479/335863915.py:12: FutureWarning: \n\nPassing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n\n  sns.barplot(x=unknown_summary.index, y=unknown_summary.values, palette='Blues_d')\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport pandas as pd\nimport ipywidgets as widgets\nfrom IPython.display import display, clear_output\n\nwidgets.IntSlider()  # Quick test widget to verify widgets load\n\n\n# Define widget\nunknown_selector = widgets.Dropdown(\n    options=sorted(df['unknown_count'].unique(), reverse=True),\n    description='Unknowns:',\n    value=1\n)\n\nsort_selector = widgets.ToggleButtons(\n    options=['year', 'total_affected'],\n    description='Sort by:',\n    button_style='info'\n)\n\noutput = widgets.Output()\n\n# Function to update output based on user selection\ndef update_dashboard(change):\n    with output:\n        clear_output(wait=True)\n        \n        # Filter dataframe by selected unknown_count\n        num_unknowns = unknown_selector.value\n        filtered_df = df[df['unknown_count'] == num_unknowns]\n\n        # Display summary statistics\n        print(f\"## Summary for Incidents with {num_unknowns} Unknown Fields\\n\")\n\n        if filtered_df.empty:\n            print(\"No incidents found for this selection.\")\n            return\n\n        top_countries = filtered_df['country'].value_counts().head(5)\n        top_years = filtered_df['year'].value_counts().head(5)\n        numeric_cols = ['total_killed', 'total_wounded', 'total_kidnapped', 'total_affected']\n        avg_numeric = filtered_df[numeric_cols].mean().round(2)\n\n        print(\"### Most Common Countries:\")\n        display(top_countries)\n\n        print(\"\\n### Most Common Years:\")\n        display(top_years)\n\n        print(\"\\n### Average Numeric Values:\")\n        display(avg_numeric.to_frame(name='Average').T)\n\n        # Display sortable DataFrame\n        print(\"\\n### Individual Incident Details:\")\n        display(filtered_df.sort_values(by=sort_selector.value, ascending=False).reset_index(drop=True))\n\n# Bind updates to widgets\nunknown_selector.observe(update_dashboard, names='value')\nsort_selector.observe(update_dashboard, names='value')\n\n# Display the interactive dashboard\ndashboard_ui = widgets.VBox([widgets.HBox([unknown_selector, sort_selector]), output])\ndisplay(dashboard_ui)\n\n# Trigger initial display\nupdate_dashboard(None)\n\n\n\n\n\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport json\nimport numpy as np\n\n# Pre-process the data for all unknown count values\ndef create_interactive_dashboard(df):\n    # Get all possible unknown count values\n    unknown_counts = sorted(df['unknown_count'].unique())\n    \n    # Create the HTML structure\n    html = \"\"\"\n    &lt;!DOCTYPE html&gt;\n    &lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Violence Against Humanitarian Aid Workers&lt;/title&gt;\n        &lt;script src=\"https://cdn.plot.ly/plotly-latest.min.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"&gt;&lt;/script&gt;\n        &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\"&gt;\n        &lt;style&gt;\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            .dashboard-container { margin-top: 20px; }\n            .row { display: flex; margin-bottom: 20px; }\n            .chart { width: 48%; margin: 0 1%; }\n            h1, h2, h3 { color: #333; }\n            select { padding: 8px; font-size: 16px; }\n            table { border-collapse: collapse; width: 100%; }\n            th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }\n            th { background-color: #f2f2f2; }\n            .control-panel { \n                background-color: #f8f9fa; \n                padding: 15px; \n                border-radius: 5px;\n                margin-bottom: 20px;\n            }\n            .data-table-container {\n                margin-top: 30px;\n                overflow-x: auto;\n            }\n            .summary-box {\n                background-color: #f8f9fa;\n                padding: 15px;\n                border-radius: 5px;\n                margin-bottom: 15px;\n            }\n            .tab-content {\n                padding: 20px;\n                border: 1px solid #dee2e6;\n                border-top: none;\n                border-radius: 0 0 5px 5px;\n            }\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"container-fluid\"&gt;\n            &lt;h1 class=\"mt-3 mb-4\"&gt;Violence Against Humanitarian Aid Workers&lt;/h1&gt;\n            \n            &lt;div class=\"control-panel\"&gt;\n                &lt;div class=\"row\"&gt;\n                    &lt;div class=\"col-md-6\"&gt;\n                        &lt;label for=\"unknown-selector\" class=\"form-label\"&gt;Select number of unknown fields:&lt;/label&gt;\n                        &lt;select id=\"unknown-selector\" class=\"form-select\" onchange=\"updateDashboard(this.value)\"&gt;\n    \"\"\"\n    \n    # Add options to the dropdown\n    for count in unknown_counts:\n        selected = \"selected\" if count == unknown_counts[0] else \"\"\n        html += f'&lt;option value=\"{int(count)}\" {selected}&gt;{int(count)}&lt;/option&gt;\\n'\n    \n    html += \"\"\"\n                        &lt;/select&gt;\n                    &lt;/div&gt;\n                    &lt;div class=\"col-md-6\"&gt;\n                        &lt;label for=\"sort-selector\" class=\"form-label\"&gt;Sort individual incidents by:&lt;/label&gt;\n                        &lt;select id=\"sort-selector\" class=\"form-select\" onchange=\"sortData(this.value)\"&gt;\n                            &lt;option value=\"year\"&gt;Year&lt;/option&gt;\n                            &lt;option value=\"total_affected\"&gt;Total Affected&lt;/option&gt;\n                            &lt;option value=\"total_killed\"&gt;Total Killed&lt;/option&gt;\n                            &lt;option value=\"total_wounded\"&gt;Total Wounded&lt;/option&gt;\n                            &lt;option value=\"total_kidnapped\"&gt;Total Kidnapped&lt;/option&gt;\n                            &lt;option value=\"country\"&gt;Country&lt;/option&gt;\n                        &lt;/select&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            \n            &lt;ul class=\"nav nav-tabs\" id=\"dashboardTabs\" role=\"tablist\"&gt;\n                &lt;li class=\"nav-item\" role=\"presentation\"&gt;\n                    &lt;button class=\"nav-link active\" id=\"overview-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#overview\" type=\"button\" role=\"tab\"&gt;Overview&lt;/button&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\" role=\"presentation\"&gt;\n                    &lt;button class=\"nav-link\" id=\"data-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#data\" type=\"button\" role=\"tab\"&gt;Raw Data&lt;/button&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n            \n            &lt;div class=\"tab-content\" id=\"dashboardTabsContent\"&gt;\n                &lt;div class=\"tab-pane fade show active\" id=\"overview\" role=\"tabpanel\"&gt;\n                    &lt;div id=\"summary-stats\" class=\"summary-box\"&gt;&lt;/div&gt;\n                    \n                    &lt;div class=\"row\"&gt;\n                        &lt;div class=\"col-md-6\"&gt;\n                            &lt;div id=\"country-chart\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"col-md-6\"&gt;\n                            &lt;div id=\"year-chart\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                    \n                    &lt;div class=\"row mt-4\"&gt;\n                        &lt;div class=\"col-md-6\"&gt;\n                            &lt;div id=\"fields-chart\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div class=\"col-md-6\"&gt;\n                            &lt;div id=\"casualties-table\"&gt;&lt;/div&gt;\n                        &lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                \n                &lt;div class=\"tab-pane fade\" id=\"data\" role=\"tabpanel\"&gt;\n                    &lt;div class=\"data-table-container\"&gt;\n                        &lt;h3&gt;Individual Incident Data&lt;/h3&gt;\n                        &lt;div id=\"data-pagination\" class=\"d-flex justify-content-between align-items-center mb-3\"&gt;\n                            &lt;div&gt;\n                                &lt;button id=\"prev-page\" class=\"btn btn-sm btn-outline-secondary\" onclick=\"prevPage()\"&gt;Previous&lt;/button&gt;\n                                &lt;span id=\"page-info\" class=\"mx-2\"&gt;Page 1&lt;/span&gt;\n                                &lt;button id=\"next-page\" class=\"btn btn-sm btn-outline-secondary\" onclick=\"nextPage()\"&gt;Next&lt;/button&gt;\n                            &lt;/div&gt;\n                            &lt;div&gt;\n                                &lt;select id=\"page-size\" class=\"form-select form-select-sm\" style=\"width: auto;\" onchange=\"changePageSize(this.value)\"&gt;\n                                    &lt;option value=\"10\"&gt;10 rows&lt;/option&gt;\n                                    &lt;option value=\"25\"&gt;25 rows&lt;/option&gt;\n                                    &lt;option value=\"50\"&gt;50 rows&lt;/option&gt;\n                                    &lt;option value=\"100\"&gt;100 rows&lt;/option&gt;\n                                &lt;/select&gt;\n                            &lt;/div&gt;\n                        &lt;/div&gt;\n                        &lt;div id=\"data-table\"&gt;&lt;/div&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        \n        &lt;script&gt;\n    \"\"\"\n    \n    # Create a JavaScript data object with pre-computed data for each unknown count\n    data_json = {}\n    \n    for count in unknown_counts:\n        filtered_df = df[df['unknown_count'] == count]\n        \n        # Country data\n        country_counts = filtered_df['country'].value_counts().reset_index()\n        country_counts.columns = ['country', 'count']\n        country_counts = country_counts.head(5)\n        \n        # Year data\n        year_counts = filtered_df['year'].value_counts().sort_index().reset_index()\n        year_counts.columns = ['year', 'count']\n        \n        # Unknown fields data\n        field_counts = {}\n        for field in ['means_of_attack', 'attack_context', 'location', 'motive', 'actor_type', 'actor_name']:\n            field_counts[field] = int(filtered_df[filtered_df[field] == 'Unknown'].shape[0])\n        \n        fields_df = pd.DataFrame({'field': list(field_counts.keys()), 'count': list(field_counts.values())})\n        \n        # Casualties data\n        numeric_cols = ['total_killed', 'total_wounded', 'total_kidnapped', 'total_affected']\n        stats = filtered_df[numeric_cols].mean().round(2).to_dict()\n        # Convert numpy types to Python native types\n        stats = {k: float(v) for k, v in stats.items()}\n        \n        # Top years\n        top_years = filtered_df['year'].value_counts().head(5)\n        top_years_data = [{'year': int(year), 'count': int(count)} for year, count in top_years.items()]\n        \n        # Full dataset (for the data tab)\n        # Select a subset of columns for display\n        display_cols = ['incident_id', 'year', 'month', 'day', 'country', \n                        'means_of_attack', 'attack_context', 'location', 'motive', 'actor_type', 'actor_name',\n                        'total_killed', 'total_wounded', 'total_kidnapped', 'total_affected']\n        \n        # Only include columns that exist in the dataframe\n        display_cols = [col for col in display_cols if col in filtered_df.columns]\n        \n        # Convert the filtered dataframe to a list of records\n        records = []\n        for _, row in filtered_df.iterrows():\n            record = {}\n            for col in display_cols:\n                val = row[col]\n                if isinstance(val, (np.integer, np.floating)):\n                    val = int(val) if isinstance(val, np.integer) else float(val)\n                elif pd.isna(val):\n                    val = \"\"\n                else:\n                    val = str(val)\n                record[col] = val\n            records.append(record)\n        \n        # Store all data for this unknown count\n        data_json[int(count)] = {\n            'countries': [\n                {'country': str(row.country), 'count': int(row['count'])} \n                for _, row in country_counts.iterrows()\n            ],\n            'years': [\n                {'year': int(row.year), 'count': int(row['count'])} \n                for _, row in year_counts.iterrows()\n            ],\n            'fields': [\n                {'field': str(row.field), 'count': int(row['count'])} \n                for _, row in fields_df.iterrows()\n            ],\n            'top_years': top_years_data,\n            'casualties': stats,\n            'total_incidents': int(len(filtered_df)),\n            'raw_data': records,\n            'columns': display_cols\n        }\n    \n    # Add the data to JavaScript\n    html += f\"const dashboardData = {json.dumps(data_json)};\\n\"\n    \n    # Add JavaScript functions for interactivity\n    html += \"\"\"\n        let currentPage = 1;\n        let pageSize = 10;\n        let currentSort = 'year';\n        let currentSortAsc = false;\n        let currentUnknownCount = document.getElementById('unknown-selector').value;\n        \n        // Initial setup\n        document.addEventListener('DOMContentLoaded', function() {\n            updateDashboard(document.getElementById('unknown-selector').value);\n        });\n        \n        function updateDashboard(unknownCount) {\n            currentUnknownCount = unknownCount;\n            currentPage = 1; // Reset to first page when changing filters\n            const data = dashboardData[unknownCount];\n            \n            // Update summary stats\n            updateSummaryStats(data);\n            \n            // Update charts\n            updateCharts(data);\n            \n            // Update data table\n            renderDataTable();\n        }\n        \n        function updateSummaryStats(data) {\n            let summaryHTML = `\n                &lt;div class=\"row\"&gt;\n                    &lt;div class=\"col-md-12\"&gt;\n                        &lt;h2&gt;Summary for Incidents with ${currentUnknownCount} Unknown Fields&lt;/h2&gt;\n                        &lt;p&gt;Found ${data.total_incidents} incidents with ${currentUnknownCount} unknown fields.&lt;/p&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n            `;\n            \n            document.getElementById('summary-stats').innerHTML = summaryHTML;\n        }\n        \n        function updateCharts(data) {\n            // Update country chart\n            const countryData = [{\n                x: data.countries.map(d =&gt; d.country),\n                y: data.countries.map(d =&gt; d.count),\n                type: 'bar',\n                marker: {color: '#1f77b4'}\n            }];\n            \n            Plotly.newPlot('country-chart', countryData, {\n                title: 'Top Countries',\n                xaxis: {title: 'Country'},\n                yaxis: {title: 'Number of Incidents'}\n            });\n            \n            // Update year chart\n            const yearData = [{\n                x: data.years.map(d =&gt; d.year),\n                y: data.years.map(d =&gt; d.count),\n                type: 'scatter',\n                mode: 'lines+markers',\n                marker: {color: '#ff7f0e'}\n            }];\n            \n            Plotly.newPlot('year-chart', yearData, {\n                title: 'Incidents by Year',\n                xaxis: {title: 'Year'},\n                yaxis: {title: 'Number of Incidents'}\n            });\n            \n            // Update fields chart\n            const fieldsData = [{\n                x: data.fields.map(d =&gt; d.field),\n                y: data.fields.map(d =&gt; d.count),\n                type: 'bar',\n                marker: {color: '#2ca02c'}\n            }];\n            \n            Plotly.newPlot('fields-chart', fieldsData, {\n                title: 'Distribution of Unknown Fields',\n                xaxis: {title: 'Field'},\n                yaxis: {title: 'Number of Incidents'}\n            });\n            \n            // Update casualties table\n            let tableHTML = `\n                &lt;h3&gt;Casualty Statistics (Average per Incident)&lt;/h3&gt;\n                &lt;table class=\"table table-striped\"&gt;\n                    &lt;thead&gt;\n                        &lt;tr&gt;\n                            &lt;th&gt;Metric&lt;/th&gt;\n                            &lt;th&gt;Value&lt;/th&gt;\n                        &lt;/tr&gt;\n                    &lt;/thead&gt;\n                    &lt;tbody&gt;\n            `;\n            \n            Object.entries(data.casualties).forEach(([key, value]) =&gt; {\n                tableHTML += `\n                    &lt;tr&gt;\n                        &lt;td&gt;${key.replace('total_', '').charAt(0).toUpperCase() + key.replace('total_', '').slice(1)}&lt;/td&gt;\n                        &lt;td&gt;${value.toFixed(2)}&lt;/td&gt;\n                    &lt;/tr&gt;\n                `;\n            });\n            \n            tableHTML += '&lt;/tbody&gt;&lt;/table&gt;';\n            document.getElementById('casualties-table').innerHTML = tableHTML;\n        }\n        \n        function renderDataTable() {\n            const data = dashboardData[currentUnknownCount];\n            const rawData = [...data.raw_data]; // Create a copy to avoid modifying the original\n            \n            // Sort data\n            rawData.sort((a, b) =&gt; {\n                const aVal = a[currentSort];\n                const bVal = b[currentSort];\n                \n                // Handle different data types\n                if (typeof aVal === 'number' && typeof bVal === 'number') {\n                    return currentSortAsc ? aVal - bVal : bVal - aVal;\n                } else {\n                    const aStr = String(aVal);\n                    const bStr = String(bVal);\n                    return currentSortAsc ? aStr.localeCompare(bStr) : bStr.localeCompare(aStr);\n                }\n            });\n            \n            // Paginate\n            const startIdx = (currentPage - 1) * pageSize;\n            const endIdx = startIdx + pageSize;\n            const pagedData = rawData.slice(startIdx, endIdx);\n            \n            // Create table HTML\n            let tableHTML = `\n                &lt;table class=\"table table-striped table-hover\"&gt;\n                    &lt;thead&gt;\n                        &lt;tr&gt;\n            `;\n            \n            // Add table headers with sort indicators\n            data.columns.forEach(col =&gt; {\n                const sortIcon = col === currentSort \n                    ? currentSortAsc ? '↑' : '↓' \n                    : '';\n                tableHTML += `&lt;th onclick=\"changeSort('${col}')\" style=\"cursor: pointer;\"&gt;${col} ${sortIcon}&lt;/th&gt;`;\n            });\n            \n            tableHTML += `\n                        &lt;/tr&gt;\n                    &lt;/thead&gt;\n                    &lt;tbody&gt;\n            `;\n            \n            // Add table rows\n            pagedData.forEach(row =&gt; {\n                tableHTML += '&lt;tr&gt;';\n                data.columns.forEach(col =&gt; {\n                    tableHTML += `&lt;td&gt;${row[col]}&lt;/td&gt;`;\n                });\n                tableHTML += '&lt;/tr&gt;';\n            });\n            \n            tableHTML += `\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            `;\n            \n            // Update the table\n            document.getElementById('data-table').innerHTML = tableHTML;\n            \n            // Update pagination info\n            const totalPages = Math.ceil(rawData.length / pageSize);\n            document.getElementById('page-info').textContent = `Page ${currentPage} of ${totalPages}`;\n            document.getElementById('prev-page').disabled = currentPage === 1;\n            document.getElementById('next-page').disabled = currentPage === totalPages;\n        }\n        \n        function changeSort(column) {\n            if (currentSort === column) {\n                // Toggle sort direction\n                currentSortAsc = !currentSortAsc;\n            } else {\n                // Set new sort column\n                currentSort = column;\n                currentSortAsc = false; // Default to descending\n            }\n            renderDataTable();\n        }\n        \n        function sortData(column) {\n            currentSort = column;\n            currentSortAsc = false;\n            renderDataTable();\n        }\n        \n        function prevPage() {\n            if (currentPage &gt; 1) {\n                currentPage--;\n                renderDataTable();\n            }\n        }\n        \n        function nextPage() {\n            const data = dashboardData[currentUnknownCount];\n            const totalPages = Math.ceil(data.raw_data.length / pageSize);\n            if (currentPage &lt; totalPages) {\n                currentPage++;\n                renderDataTable();\n            }\n        }\n        \n        function changePageSize(size) {\n            pageSize = parseInt(size);\n            currentPage = 1; // Reset to first page\n            renderDataTable();\n        }\n        &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\"\n    \n    return html\n\n# Generate the HTML content\nhtml_output = create_interactive_dashboard(df)\n\n# Save to external file\nwith open('interactive_dashboard.html', 'w') as f:\n    f.write(html_output)\n\nprint(\"Dashboard saved to interactive_dashboard.html\")\n\n\nDashboard saved to interactive_dashboard.html\n\n\n\n\nCode\n# import pandas as pd\n# import plotly.express as px\n# import json\n# import numpy as np\n\n# # Pre-process the data for all unknown count values\n# def create_interactive_dashboard(df):\n#     # Get all possible unknown count values\n#     unknown_counts = sorted(df['unknown_count'].unique())\n    \n#     # Create the HTML structure\n#     html = \"\"\"\n#     &lt;!DOCTYPE html&gt;\n#     &lt;html&gt;\n#     &lt;head&gt;\n#         &lt;title&gt;Violence Against Humanitarian Aid Workers&lt;/title&gt;\n#         &lt;script src=\"https://cdn.plot.ly/plotly-latest.min.js\"&gt;&lt;/script&gt;\n#         &lt;style&gt;\n#             body { font-family: Arial, sans-serif; margin: 20px; }\n#             .dashboard-container { margin-top: 20px; }\n#             .row { display: flex; margin-bottom: 20px; }\n#             .chart { width: 48%; margin: 0 1%; }\n#             h1, h2 { color: #333; }\n#             select { padding: 8px; font-size: 16px; }\n#             table { border-collapse: collapse; width: 100%; }\n#             th, td { border: 1px solid #ddd; padding: 8px; text-align: right; }\n#             th { background-color: #f2f2f2; }\n#         &lt;/style&gt;\n#     &lt;/head&gt;\n#     &lt;body&gt;\n#         &lt;h1&gt;Violence Against Humanitarian Aid Workers&lt;/h1&gt;\n        \n#         &lt;div&gt;\n#             &lt;label for=\"unknown-selector\"&gt;Select number of unknown fields: &lt;/label&gt;\n#             &lt;select id=\"unknown-selector\" onchange=\"updateDashboard(this.value)\"&gt;\n#     \"\"\"\n    \n#     # Add options to the dropdown\n#     for count in unknown_counts:\n#         selected = \"selected\" if count == unknown_counts[0] else \"\"\n#         html += f'&lt;option value=\"{int(count)}\" {selected}&gt;{int(count)}&lt;/option&gt;\\n'\n    \n#     html += \"\"\"\n#             &lt;/select&gt;\n#         &lt;/div&gt;\n        \n#         &lt;div class=\"dashboard-container\"&gt;\n#             &lt;div class=\"row\"&gt;\n#                 &lt;div class=\"chart\"&gt;\n#                     &lt;div id=\"country-chart\"&gt;&lt;/div&gt;\n#                 &lt;/div&gt;\n#                 &lt;div class=\"chart\"&gt;\n#                     &lt;div id=\"year-chart\"&gt;&lt;/div&gt;\n#                 &lt;/div&gt;\n#             &lt;/div&gt;\n            \n#             &lt;div class=\"row\"&gt;\n#                 &lt;div class=\"chart\"&gt;\n#                     &lt;div id=\"fields-chart\"&gt;&lt;/div&gt;\n#                 &lt;/div&gt;\n#                 &lt;div class=\"chart\"&gt;\n#                     &lt;div id=\"casualties-table\"&gt;&lt;/div&gt;\n#                 &lt;/div&gt;\n#             &lt;/div&gt;\n#         &lt;/div&gt;\n        \n#         &lt;script&gt;\n#     \"\"\"\n    \n#     # Create a JavaScript data object with pre-computed data for each unknown count\n#     data_json = {}\n    \n#     for count in unknown_counts:\n#         filtered_df = df[df['unknown_count'] == count]\n        \n#         # Country data\n#         country_counts = filtered_df['country'].value_counts().reset_index()\n#         country_counts.columns = ['country', 'count']\n#         country_counts = country_counts.head(5)\n        \n#         # Year data\n#         year_counts = filtered_df['year'].value_counts().sort_index().reset_index()\n#         year_counts.columns = ['year', 'count']\n        \n#         # Unknown fields data\n#         field_counts = {}\n#         for field in ['means_of_attack', 'attack_context', 'location', 'motive', 'actor_type', 'actor_name']:\n#             field_counts[field] = int(filtered_df[filtered_df[field] == 'Unknown'].shape[0])\n        \n#         fields_df = pd.DataFrame({'field': list(field_counts.keys()), 'count': list(field_counts.values())})\n        \n#         # Casualties data\n#         numeric_cols = ['total_killed', 'total_wounded', 'total_kidnapped', 'total_affected']\n#         stats = filtered_df[numeric_cols].mean().round(2).to_dict()\n#         # Convert numpy types to Python native types\n#         stats = {k: float(v) for k, v in stats.items()}\n        \n#         # Store all data for this unknown count\n#         data_json[int(count)] = {\n#             'countries': [\n#                 {'country': str(row.country), 'count': int(row['count'])} \n#                 for _, row in country_counts.iterrows()\n#             ],\n#             'years': [\n#                 {'year': int(row.year), 'count': int(row['count'])} \n#                 for _, row in year_counts.iterrows()\n#             ],\n#             'fields': [\n#                 {'field': str(row.field), 'count': int(row['count'])} \n#                 for _, row in fields_df.iterrows()\n#             ],\n#             'casualties': stats,\n#             'total_incidents': int(len(filtered_df))\n#         }\n    \n#     # Add the data to JavaScript\n#     html += f\"const dashboardData = {json.dumps(data_json)};\\n\"\n    \n#     # Add JavaScript functions for interactivity\n#     html += \"\"\"\n#         // Initial setup\n#         document.addEventListener('DOMContentLoaded', function() {\n#             updateDashboard(document.getElementById('unknown-selector').value);\n#         });\n        \n#         function updateDashboard(unknownCount) {\n#             const data = dashboardData[unknownCount];\n            \n#             // Update header\n#             document.querySelector('h1').textContent = \n#                 `Violence Against Humanitarian Aid Workers (${data.total_incidents} incidents with ${unknownCount} unknown fields)`;\n            \n#             // Update country chart\n#             const countryData = [{\n#                 x: data.countries.map(d =&gt; d.country),\n#                 y: data.countries.map(d =&gt; d.count),\n#                 type: 'bar',\n#                 marker: {color: '#1f77b4'}\n#             }];\n            \n#             Plotly.newPlot('country-chart', countryData, {\n#                 title: 'Top Countries',\n#                 xaxis: {title: 'Country'},\n#                 yaxis: {title: 'Number of Incidents'}\n#             });\n            \n#             // Update year chart\n#             const yearData = [{\n#                 x: data.years.map(d =&gt; d.year),\n#                 y: data.years.map(d =&gt; d.count),\n#                 type: 'scatter',\n#                 mode: 'lines+markers',\n#                 marker: {color: '#ff7f0e'}\n#             }];\n            \n#             Plotly.newPlot('year-chart', yearData, {\n#                 title: 'Incidents by Year',\n#                 xaxis: {title: 'Year'},\n#                 yaxis: {title: 'Number of Incidents'}\n#             });\n            \n#             // Update fields chart\n#             const fieldsData = [{\n#                 x: data.fields.map(d =&gt; d.field),\n#                 y: data.fields.map(d =&gt; d.count),\n#                 type: 'bar',\n#                 marker: {color: '#2ca02c'}\n#             }];\n            \n#             Plotly.newPlot('fields-chart', fieldsData, {\n#                 title: 'Distribution of Unknown Fields',\n#                 xaxis: {title: 'Field'},\n#                 yaxis: {title: 'Number of Incidents'}\n#             });\n            \n#             // Update casualties table\n#             let tableHTML = `\n#                 &lt;h3&gt;Casualty Statistics (Average per Incident)&lt;/h3&gt;\n#                 &lt;table&gt;\n#                     &lt;tr&gt;\n#                         &lt;th&gt;Metric&lt;/th&gt;\n#                         &lt;th&gt;Value&lt;/th&gt;\n#                     &lt;/tr&gt;\n#             `;\n            \n#             Object.entries(data.casualties).forEach(([key, value]) =&gt; {\n#                 tableHTML += `\n#                     &lt;tr&gt;\n#                         &lt;td&gt;${key.replace('total_', '').charAt(0).toUpperCase() + key.replace('total_', '').slice(1)}&lt;/td&gt;\n#                         &lt;td&gt;${value.toFixed(2)}&lt;/td&gt;\n#                     &lt;/tr&gt;\n#                 `;\n#             });\n            \n#             tableHTML += '&lt;/table&gt;';\n#             document.getElementById('casualties-table').innerHTML = tableHTML;\n#         }\n#         &lt;/script&gt;\n#     &lt;/body&gt;\n#     &lt;/html&gt;\n#     \"\"\"\n    \n#     return html\n\n# # Generate the HTML content\n# html_output = create_interactive_dashboard(df)\n\n# # Save to external file\n# with open('interactive_dashboard.html', 'w') as f:\n#     f.write(html_output)\n\n# print(\"Dashboard saved to interactive_dashboard.html\")\n\n\nDashboard saved to interactive_dashboard.html\n\n\n\n\nCode\nfrom IPython.display import IFrame, display\n\n# Display the dashboard in the notebook\ndisplay(IFrame(src='interactive_dashboard.html', width='100%', height=800))\n\n# In the HTML output, this will be rendered as an iframe"
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Uncovering the Unknown - Insights into Violence Against Humanitarian Aid",
    "section": "",
    "text": "The Aid Worker Security Database (AWSD) documents instances of ‘major violence’ against aid workers, which includes:\n\nKidnapping\nKilling\nWounding (serious injury requiring medical attention)\nRape and sexual assault"
  },
  {
    "objectID": "background.html#data-source",
    "href": "background.html#data-source",
    "title": "Uncovering the Unknown - Insights into Violence Against Humanitarian Aid",
    "section": "",
    "text": "The Aid Worker Security Database (AWSD) documents instances of ‘major violence’ against aid workers, which includes:\n\nKidnapping\nKilling\nWounding (serious injury requiring medical attention)\nRape and sexual assault"
  },
  {
    "objectID": "background.html#definition-of-aid-workers",
    "href": "background.html#definition-of-aid-workers",
    "title": "Uncovering the Unknown - Insights into Violence Against Humanitarian Aid",
    "section": "Definition of Aid Workers",
    "text": "Definition of Aid Workers\nAid workers are defined as employees and associated personnel (both paid and volunteer) of nonprofit aid agencies providing material and technical assistance in humanitarian contexts. This encompasses:\n\nNational and international NGOs\nLocal volunteer groups\nInternational Red Cross/Red Crescent Movement\nDonor agencies\nUN agencies within the Inter-Agency Standing Committee on Humanitarian Affairs (FAO, OCHA, UNDP, UNFPA, UNHCR, UNICEF, UN-Habitat, WFP and WHO)\nIOM, UNRWA, UNMAS, and when relevant, the World Bank\n\nThis definition includes locally contracted staff like drivers and security guards. It also covers contracted workers and vendors of humanitarian organizations when they are affected by violence while supporting humanitarian missions.\nThe definition excludes UN peacekeeping personnel, human rights workers, election monitors, and organizations focused solely on political, religious, or advocacy work."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Uncovering the Unknown - Insights into Violence Against Humanitarian Aid",
    "section": "",
    "text": "Violence Against Humanitarian...\n  \n    Home\n    Background & Context\n    Analysis\n  \n\n\n\n\n  \n    Since 1997, 0 humanitarian aid workers have been affected by violence against aid workers.\n  \n  \n  \n    \n      0\n      killed\n    \n    \n      0\n      wounded\n    \n    \n      0\n      kidnapped\n    \n  \n\n\n\n\n  \n    Limited resources have long prevented global organizations from fully capturing the truth behind attacks on humanitarian missions.\n  \n  \n  \n    But behind every missing detail is a missed opportunity to prepare, to protect, to prevent.\n  \n  \n  \n    To minimize the harm, we must uncover the patterns hidden in the data—and come together, as a global force, to turn insight into action.\n  \n\n\n\n\n  \n    \n    Background and Context\n\n    \n      Data Source\n      The Aid Worker Security Database (AWSD) documents instances of 'major violence' against aid workers, which includes:\n      \n        Kidnapping\n        Killing\n        Wounding (serious injury requiring medical attention)\n        Rape and sexual assault\n      \n      \n      Definition of Aid Workers\n      Aid workers are defined as employees and associated personnel (both paid and volunteer) of nonprofit aid agencies providing material and technical assistance in humanitarian contexts. This encompasses:\n      \n        National and international NGOs\n        Local volunteer groups\n        International Red Cross/Red Crescent Movement\n        Donor agencies\n        UN agencies within the Inter-Agency Standing Committee on Humanitarian Affairs (FAO, OCHA, UNDP, UNFPA, UNHCR, UNICEF, UN-Habitat, WFP and WHO)\n        IOM, UNRWA, UNMAS, and when relevant, the World Bank\n      \n      \n      This definition includes locally contracted staff like drivers and security guards. It also covers contracted workers and vendors of humanitarian organizations when they are affected by violence while supporting humanitarian missions.\n      \n      The definition excludes UN peacekeeping personnel, human rights workers, election monitors, and organizations focused solely on political, religious, or advocacy work."
  }
]